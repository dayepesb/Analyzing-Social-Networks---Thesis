package co.edu.poli.Graph;

import java.awt.Color;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map.Entry;

import co.edu.poli.Edge.Edge;
import co.edu.poli.Edge.EdgeDirect;
import co.edu.poli.Node.Node;
import co.edu.poli.Node.NodeUniq;

public class GraphUndirect implements Graph {

	private long idGraph;
	private String label;
	private ArrayList<Node> listNodes;
	private ArrayList<Edge> listEdges;
	private HashMap<Long, ArrayList<Edge>> graph;
	private long nextIdNode, nextIdEdge;

	public GraphDirect() {
		this.idGraph = 1;
		this.label = "Empty";
		this.listNodes = new ArrayList<>();
		this.listEdges = new ArrayList<>();
		graph = new HashMap<>();
		this.nextIdNode = 0;
		this.nextIdEdge = 0;
	}

	public GraphDirect(long idGraph) {
		this.idGraph = idGraph;
		this.label = "Empty";
		this.listNodes = new ArrayList<>();
		this.listEdges = new ArrayList<>();
		graph = new HashMap<>();
		this.nextIdNode = 0;
		this.nextIdEdge = 0;
	}

	public GraphDirect(String label) {
		this.idGraph = 1;
		this.label = label;
		this.listNodes = new ArrayList<>();
		this.listEdges = new ArrayList<>();
		graph = new HashMap<>();
		this.nextIdNode = 0;
		this.nextIdEdge = 0;
	}

	public GraphDirect(long idGraph, String label) {
		this.idGraph = idGraph;
		this.label = label;
		this.listNodes = new ArrayList<>();
		this.listEdges = new ArrayList<>();
		graph = new HashMap<>();
		this.nextIdNode = 0;
		this.nextIdEdge = 0;
	}

	@Override
	public long getIdGraph() {
		return idGraph;
	}

	@Override
	public String getLabel() {
		return label;
	}

	@Override
	public void setLabel(String label) {
		this.label = label;
	}

	@Override
	public long getNextIdNode() {
		nextIdNode += 1;
		return (nextIdNode - 1);
	}

	@Override
	public long getNextIdEdge() {
		nextIdEdge += 1;
		return (nextIdEdge - 1);
	}

	@Override
	public int cardinalityNodes() {
		return listNodes.size();
	}

	@Override
	public int cardinalityEdges() {
		return listEdges.size();
	}

	@Override
	public ArrayList<Node> getListNodes() {
		return listNodes;
	}

	@Override
	public ArrayList<Edge> getListEdges() {
		return listEdges;
	}

	@Override
	public HashMap<Long, ArrayList<Edge>> getGraph() {
		return graph;
	}

	@Override
	public boolean addNode() {
		try {
			Node n1 = new NodeUniq(this.getNextIdNode());
			listNodes.add(n1);
			graph.put(n1.getIdNode(), new ArrayList<>());
			return true;
		} catch (Exception e) {
			return false;
		}
	}

	@Override
	public boolean addNode(Color color) {
		try {
			Node n1 = new NodeUniq(this.getNextIdNode(), color);
			listNodes.add(n1);
			graph.put(n1.getIdNode(), new ArrayList<>());
			return true;
		} catch (Exception e) {
			return false;
		}
	}

	@Override
	public boolean addNode(String label) {
		try {
			Node n1 = new NodeUniq(this.getNextIdNode(), label);
			listNodes.add(n1);
			graph.put(n1.getIdNode(), new ArrayList<>());
			return true;
		} catch (Exception e) {
			return false;
		}
	}

	@Override
	public boolean addNode(String label, Color color) {
		try {
			Node n1 = new NodeUniq(this.getNextIdNode(), label, color);
			listNodes.add(n1);
			graph.put(n1.getIdNode(), new ArrayList<>());
			return true;
		} catch (Exception e) {
			return false;
		}
	}

	@Override
	public boolean addEdge(Node nodeA, Node nodeB, boolean isDirect) {
		try {
			EdgeDirect ed = new EdgeDirect(this.getNextIdEdge(), nodeA, nodeB);
			listEdges.add(ed);
			graph.get(ed.getNodeA().getIdNode()).add(ed);
			return true;
		} catch (Exception e) {
			return false;
		}
	}

	@Override
	public boolean addEdge(Node nodeA, Node nodeB, double weight, boolean isDirect) {
		try {
			EdgeDirect ed = new EdgeDirect(this.getNextIdEdge(), nodeA, nodeB, weight);
			listEdges.add(ed);
			graph.get(ed.getNodeA().getIdNode()).add(ed);
			return true;
		} catch (Exception e) {
			return false;
		}
	}

	@Override
	public boolean addEdge(Node nodeA, Node nodeB, String label, boolean isDirect) {
		try {
			EdgeDirect ed = new EdgeDirect(this.getNextIdEdge(), nodeA, nodeB, label);
			listEdges.add(ed);
			graph.get(ed.getNodeA().getIdNode()).add(ed);
			return true;
		} catch (Exception e) {
			return false;
		}

	}

	@Override
	public boolean addEdge(Node nodeA, Node nodeB, double weight, String label, boolean isDirect) {
		try {
			EdgeDirect ed = new EdgeDirect(this.getNextIdEdge(), nodeA, nodeB, weight, label);
			listEdges.add(ed);
			graph.get(ed.getNodeA().getIdNode()).add(ed);
			return true;
		} catch (Exception e) {
			return false;
		}
	}

	@Override
	public boolean removeNode(long idNode) {
		boolean b = false;
		Node nu = null;
		for (int i = 0; i < listNodes.size(); i++) {
			if (listEdges.get(i).getId() == idNode) {
				nu = listNodes.remove(i);
				graph.remove(i);
				b = true;
				break;
			}
		}
		if (!b)
			return false;

		for (Entry<Long, ArrayList<Edge>> entry : graph.entrySet()) {
			for (int i = 0; i < entry.getValue().size(); i++) {
				if (entry.getValue().get(i).getNodeB().getIdNode() == nu.getIdNode()) {
					graph.get(entry.getKey()).remove(i);
					break;
				}
			}
		}

		return true;
	}

	@Override
	public boolean removeEdge(long idEdge) {
		boolean b = false;
		Edge ed = null;
		for (int i = 0; i < listEdges.size(); i++) {
			if (listEdges.get(i).getId() == idEdge) {
				b = true;
				ed = listEdges.remove(i);
				break;
			}
		}
		if (!b)
			return false;

		for (int i = 0; i < graph.get(ed.getNodeA().getIdNode()).size(); i++) {
			if (graph.get(ed.getNodeA().getIdNode()).get(i).getNodeB().getIdNode() == idEdge) {
				graph.get(ed.getNodeA().getIdNode()).remove(i);
				break;
			}
		}

		return true;
	}
}
